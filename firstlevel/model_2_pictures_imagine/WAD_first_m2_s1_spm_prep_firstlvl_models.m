%% WAD_first_s1_spm_prep_firstlvl_models
%
% This script generates a CANlab style first level DSGN structure array and
% spm style onset/duration and noise regressor files
%
% See canlab_glm_single_subject('dsgninfo'), or documentation in 
% Github\CanlabCore\CanlabCore\GLM_Batch_tools for details on first level
% analysis using CANlab tools
%
% This script is adapted by @lukasvo76 from the scripts
% 1) 1_spm_fit_firstlvl_models.m and 1_spm_prep_single_trial_models.m
% by @bogpetre on 
% Google Drive\CANlab\CANLAB Lab Member Documents\GLM_batch_tools\bogdan_paingen
% 2) MPA2_set_design_model1_blanca.m by @martaceko on
% Google Drive\CANlab\CANLAB Lab Member Documents\GLM_batch_tools\
% Marta_MPA2\MPA2code_1stlevel\Code
% contact @lukasvo76 if you need those original scripts
%
% DEPENDENCIES ON YOUR MATLAB PATH
% a) SPM12
% b) CANlab tools cloned from Github (see canlab.github.io)
% 
% INPUTS 
% noise_regs.txt and onsets.mat files in
% derivatives\fmriprep\sub-[0-9][0-9]\ses-1\func\run-x
% generated by WAD_prep_s3_extract_confound_reg_fMRIprep
%
% OUTPUT
% 1. CANlab style first level DSGN structure array
% 2. spm style onset/duration and noise regressor files
% these can be used to fit first level models using
% WAD_first_s2_spm_fit_firstlvl_models.m
%
% OPTIONS
% model
% choose between different models previously defined in 
% WAD_prep_s3_extract_confound_reg_fMRIprep.m
%__________________________________________________________________________
%
% authors: Lukas Van Oudenhove & Iris Coppieters
% date:   April, 2021
%
%__________________________________________________________________________
% @(#)% LaBGAS_1_spm_prep_firstlvl_models.m         v1.0        
% last modified: 2021/04/12
%

%% SETTINGS
%--------------------------------------------------------------------------

% addpath(genpath('C:\Users\lukas\Documents\GitHub\CanlabCore')); % add relevant CANlab tools folders and spm to Matlab path if they are not there yet
% addpath(genpath('C:\Users\lukas\Documents\GitHub\CanlabPrivate'));
% addpath(genpath('C:\Users\lukas\Documents\MATLAB\spm12'));
addpath(genpath('C:\Users\lukas\Dropbox (Dartmouth College)\4.Iris_WAD_MRI\scripts_windows')); % add our local path to the scriptsdir for this project

model = 'model_2_pictures_imagine';


%% CALL FUNCTION TO CREATE DSGN STRUCTURE ARRAY
%--------------------------------------------------------------------------

switch model
    case 'model_1_pictures'
        DSGN = WAD_get_firstlvl_dsgn_obj_model_1();
    case 'model_2_pictures_imagine'
        DSGN = WAD_get_firstlvl_dsgn_obj_model_2();
    otherwise
        error('invalid model option, correct in settings');
end


%% EXTRACT MODEL DATA, PERFORM SANITY CHECKS, AND SAVE
%--------------------------------------------------------------------------

conds2model = DSGN.conditions{1}; % assumes that conditions are the same for all sessions!

    if isfield(DSGN,'pmods')
        pmods2model = DSGN.pmods{1}; % assumes that pmods are the same for all sessions!
    end

subjs = dir([DSGN.modeldir,'\sub-*']);

for sub = 1:size(DSGN.subjects,2) % loop over subj
    
    for run = 1:size(DSGN.funcnames,2) % loop over runs
        
        nii = dir([DSGN.subjects{sub},'\',DSGN.funcnames{run}]);
    
        if ~isempty(nii)
            
            switch model
                case 'model_1_pictures'
                    onset_file=ls([nii(1).folder,'\onset*model_1*']);
                case 'model_2_pictures_imagine'
                    onset_file=ls([nii(1).folder,'\onset*model_2*']);
                otherwise
                    error('invalid model option, correct in settings');
            end
            
            if isfield(DSGN,'pmods')
                pmod_file=ls([nii(1).folder,'\pmods*']);
            end
            
            save_files = true;    
            nii_path = [nii(1).folder, '\', nii(1).name];
            sid = subjs(sub).name;
            nii_hdr = read_hdr(nii_path); % used later for sanity checks

            % CREATE ONSETS AND PMODS VECTOR DESIGN
            % define and load onsets file generated by WAD_prep_s3_extract_confound_reg_fMRIprep.m     
            try 
                stim_dat = importdata([nii(1).folder,'\',onset_file(1,:)]); % in our case, this generates a table variable, which is great!
            catch
                error(['Could not import onset data for ' nii_path]);
            end
            
            % define and load pmods file generated by
            % LaBGAS_extract_pmods_phenotype_trial_tsv.m if they exist
            
            if isfield(DSGN,'pmods')
                try 
                    pmod_dat = importdata([nii(1).folder,'\',pmod_file(1,:)]); % in our case, this generates a table variable, which is great!
                catch
                    error(['Could not import pmods for ' nii_path]);
                end
            end
            
            % initialize structure for each condition
            % this is study-specific and currently still partly hard-coded!
            % a future version of this script should make this obsolete if
            % we adopt CANlab-style cell arrays to store onsets, durations,
            % and pmods
            high_fear = struct('name',{conds2model(1)}, ...
                        'onset', {{[]}}, ...
                        'duration', {{[]}});
            moderate_fear = struct('name',{conds2model(2)}, ...
                            'onset', {{[]}}, ...
                            'duration', {{[]}});
            neutral_fear = struct('name',{conds2model(3)}, ...
                            'onset', {{[]}}, ...
                            'duration', {{[]}});
            imagine_high = struct('name',{conds2model(4)}, ...
                            'onset', {{[]}}, ...
                            'duration', {{[]}});
            imagine_moderate = struct('name',{conds2model(5)}, ...
                            'onset', {{[]}}, ...
                            'duration', {{[]}});
            imagine_neutral = struct('name',{conds2model(6)}, ...
                            'onset', {{[]}}, ...
                            'duration', {{[]}});
            
            % initialize SPM style design obj
            for k = 1:size(stim_dat.trial_type,1)
                switch stim_dat.trial_type(k)
                    case 'high_fear'
                        high_fear.onset{1} = [high_fear.onset{1}, stim_dat.onset(k)];
                        high_fear.duration{1} = [high_fear.duration{1}, stim_dat.duration(k)];
                    case 'moderate_fear'
                        moderate_fear.onset{1} = [moderate_fear.onset{1}, stim_dat.onset(k)];
                        moderate_fear.duration{1} = [moderate_fear.duration{1}, stim_dat.duration(k)];
                    case 'neutral_fear'
                        neutral_fear.onset{1} = [neutral_fear.onset{1}, stim_dat.onset(k)];
                        neutral_fear.duration{1} = [neutral_fear.duration{1}, stim_dat.duration(k)];
                    case 'imagine_high'
                        imagine_high.onset{1} = [imagine_high.onset{1}, stim_dat.onset(k)];
                        imagine_high.duration{1} = [imagine_high.duration{1}, stim_dat.duration(k)];
                    case 'imagine_moderate'
                        imagine_moderate.onset{1} = [imagine_moderate.onset{1}, stim_dat.onset(k)];
                        imagine_moderate.duration{1} = [imagine_moderate.duration{1}, stim_dat.duration(k)];
                    case 'imagine_neutral'
                        imagine_neutral.onset{1} = [imagine_neutral.onset{1}, stim_dat.onset(k)];
                        imagine_neutral.duration{1} = [imagine_neutral.duration{1}, stim_dat.duration(k)];
                end
            end
            
            % add structures for pmods if specified in DSGN
            if isfield(DSGN,'pmods')
                high_fear.pmod = struct('name',{pmods2model(1)},...
                    'param',{{[]}},...
                    'poly',{{[1]}});
                moderate_fear.pmod = struct('name',{pmods2model(2)},...
                    'param',{{[]}},...
                    'poly',{{[1]}});
                neutral_fear.pmod = struct('name',{pmods2model(3)},...
                    'param',{{[]}},...
                    'poly',{{[1]}});
                for z = 1:size(pmod_dat.trial_valence,1)
                    switch pmod_dat.trial_valence(z)
                        case 'high_fear'
                            high_fear.pmod.param{1} = [high_fear.pmod.param{1}, pmod_dat.state_symptoms(z)];
                        case 'moderate_fear'
                            moderate_fear.pmod.param{1} = [moderate_fear.pmod.param{1}, pmod_dat.state_symptoms(z)];
                        case 'neutral_fear'
                            neutral_fear.pmod.param{1} = [neutral_fear.pmod.param{1}, pmod_dat.state_symptoms(z)];
                        case 'imagine_high'
                            imagine_high.pmod.param{1} = [imagine_high.pmod.param{1}, pmod_dat.state_symptoms(z)];
                        case 'imagine_moderate'
                            imagine_moderate.pmod.param{1} = [imagine_moderate.pmod.param{1}, pmod_dat.state_symptoms(z)];
                        case 'imagine_neutral'
                            imagine_neutral.pmod.param{1} = [imagine_neutral.pmod.param{1}, pmod_dat.state_symptoms(z)];
                    end
                end
%                 negative.orth = {[0]}; % if you want to turn spm's default orthogonalization between the unmodulated and modulated regressors off - not recommended unless you have mean centered your pmod
%                 neutral.orth = {[0]};
%                 positive.orth = {[0]}; 
            end
                      
            % CREATE NOISE VECTOR DESIGN
            % NOTE: this variable MUST be called R for canlab glm tools (or actually the SPM tools they 
            % invoke) to work 
            noise_tsv = dir([nii(1).folder,'\noise_regs*.txt']);
            R=readtable([noise_tsv(1).folder,'\',noise_tsv(1).name],'FileType', 'text', 'Delimiter', 'tab');
            R=table2array(R);
                
            % SANITY CHECK ON DESIGN INFO
            maxDesignTiming = max([high_fear.onset{1} + high_fear.duration{1}, moderate_fear.onset{1} + moderate_fear.duration{1}, neutral_fear.onset{1} + neutral_fear.duration{1}, imagine_high.onset{1} + imagine_high.duration{1}, imagine_moderate.onset{1} + imagine_moderate.duration{1}, imagine_neutral.onset{1} + imagine_neutral.duration{1}]);
            boldDuration = nii_hdr.tdim*DSGN.tr;
            
            if boldDuration < maxDesignTiming
                warning(['Max stimulus timing (' int2str(maxDesignTiming) 's) exceeds BOLD duration (' int2str(boldDuration) ,'s) for ' sid ' run ' int2str(run), ', skipping ...']);
                save_files = false;
            end
            
            % SAVE FILES IF SANITY CHECKS ARE PASSED
            if save_files
                mkdir(nii(1).folder,DSGN.modelingfilesdir)
                mdl_path = [nii(1).folder, '\', DSGN.modelingfilesdir, '\'];
                save([mdl_path, high_fear.name{1}],'-struct','high_fear');
                save([mdl_path, moderate_fear.name{1}],'-struct','moderate_fear');
                save([mdl_path, neutral_fear.name{1}],'-struct','neutral_fear');
                save([mdl_path, imagine_high.name{1}],'-struct','imagine_high');
                save([mdl_path, imagine_moderate.name{1}],'-struct','imagine_moderate');
                save([mdl_path, imagine_neutral.name{1}],'-struct','imagine_neutral');

                save([mdl_path, DSGN.multireg, '.mat'],'R');
            end
            
        else
            subject=DSGN.subjects{sub};
            warning(strcat('missing run_',num2str(run),' in subject_',subject));
        
        end % if loop checking whether run has .nii
        
    end % loop over runs
    
end % loop over subjects